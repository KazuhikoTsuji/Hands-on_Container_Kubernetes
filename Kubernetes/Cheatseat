##Stage0 GCPへのアクセス
  #GCPへのアクセス
    https://cloud.google.com/
    
  #<参考> kubectlコマンドで各種コンポーネントを確認
    -Kubernetesを構成しているNodeを確認
      $ kubectl get node

    -Kubernetesを構成しているPodを確認
      $ kubectl get pods -n kube-system -o wide

##Stage1 Podのデプロイ
  #Step1-①: Kubectl run コマンドで直接Podを作成
    -Podを作成
      $ kubectl run nginx --image=nginx:1.17.6 --restart=Never
      
    -Podが作成されたことを確認
      $ kubectl get pods
    
    -Podが作成されたことを確認(詳細)
      $ kubectl get pods -w
      
    -Podにアクセス
      $ curl http://<クラスターIPアドレス>/
      
    -Podを削除
      $ kubectl delete pod nginx

    -Podが削除されたことを確認
      $ kubectl get pods

  #Step1-②: Kubectl apply コマンドでマニフェストファイルからPodを作成
    -マニフェストを生成
      $ kubectl run nginx --image=nginx:1.17.6 --restart=Never --dry-run -o yaml

    -マニフェストをファイルに出力
      $ mkdir yamls && cd $_
      $ kubectl run nginx --image=nginx:1.17.6 --restart=Never --dry-run -o yaml > nginx-pod.yaml
      $ ls

    -マニフェストファイルからPodをデプロイ
      $ kubectl apply -f nginx-pod.yaml
      $ kubectl get pods

    -Podを削除
      $ kubectl delete -f nginx-pod.yaml
      $ kubectl get pods

  #Step2: namespaceを指定してPodを作成
    -新規にnamespaceを作成
     マニフェストを生成 namespace名:prod
      $ kubectl create namespace prod --dry-run -o yaml

    -マニフェストをファイルに出力
      $ kubectl create namespace prod --dry-run -o yaml > prod-namespace.yaml
      $ ls

    -マニフェストファイルからnamespaceを作成
      $ kubectl apply -f prod-namespace.yaml

    -namespace prodが作成されたことを確認
      $ kubectl get namespace

    -namespace prodにPodが存在しないことを確認
      $ kubectl get pods -n prod

    -マニフェストファイルを編集
      $ vi nginx-pod.yaml

      #下記を追加
        namespace: prod

      :w nginx-pod-prod.yaml

      #下記の出力を確認
        "nginx-pod-prod.yaml" [New] 17L, 290C written

      #viを終了
        :q!

      #新しいマニフェストファイルが作成されたことを確認
        $ ls

    -マニフェストファイルからPodをデプロイ
      $ kubectl apply -f nginx-pod-prod.yaml

    -defaultネームスペースにはPodがデプロイされていないことを確認
      $ kubectl get pods

    -prodネームスペースにPodがデプロイされていることを確認
      $ kubectl get pods -n prod

    -Podを削除
      $ kubectl delete -f nginx-pod-prod.yaml

    -namespace prodにPodが存在しないことを確認
      $ kubectl get pods -n prod

##Stage2 DeploymentとReplicaSetの活用
  #Step1: Kubectl apply コマンドでマニフェストファイルからDeploymentを作成
    -マニフェストを生成
      $ kubectl run nginx --image=nginx:1.17.6 --restart=Always --replicas=2 --dry-run -o yaml

    -マニフェストをファイルに出力
      $ kubectl run nginx --image=nginx:1.17.6 --restart=Always --replicas=2 --dry-run -o yaml > nginx-deployment.yaml 
      $ ls

    -マニフェストファイルからDeploymentを作成
      $ kubectl apply -f nginx-deployment.yaml

    -Deploymentが作成されたことを確認
      $ kubectl get deployment

    -ReplicaSetが作成されたことを確認
      $ kubectl get replicasets

    -Podが作成されたことを確認
      $ kubectl get pods

  #Step2: マニフェストファイルの記述内容を確認
    -Deploymentの記述内容を確認
      $ kubectl get deploy nginx -o yaml --export

    -ReplicaSetの記述内容を確認
      $ kubectl get replicaset <ReplicaSet名> -o yaml --export

    -Podの記述内容を確認
      $ kubectl get pods <Pod名> -o yaml --export

  #Step3: Podを意図的に削除して、オートヒーリングすることを確認
    -稼働中のPodを確認
      $ kubectl get pods

    -Podを一つ削除
      $ kubectl delete pod <Pod名>

    -Podが削除されるが、新しいPodが即座に作成されることを確認
      $ kubectl get pods

  #Step4-①:Deploymentを編集して、Podの数を増減させる
    -Deploymentのパラメーターを編集
      $ kubectl edit deployment nginx

      #編集
       replicas: 2
       ↓
       replicas: 4

      #viを終了
       :wq

    -Deploymentの状態を確認
      $ kubectl get deployment

    -ReplicaSetの状態を確認
      $ kubectl get replicaset

    -Podの状態を確認
      $ kubectl get pods

  #Step4-②:Deploymentを編集して、Podの数を増減させる
    -Deploymentのパラメーターは下記の方法でも可能
      $ vi nginx-deployment.yaml

      #編集
       replicas: 2
        ↓
       replicas: 4

      #viを終了
       :wq

    -マニフェストファイルを上書き適用
      $ kubectl apply -f nginx-deployment.yaml

    -Deploymentの状態を確認
      $ kubectl get deploy

    -ReplicaSetの状態を確認
      $ kubectl get replicaset

    -Podの状態を確認
      $ kubectl get pods	

  #Step4-③:Deploymentを編集せずに、コマンドラインからPodの数を増減させる
    -Pod数増加前のDeploymentの状態を確認
      $ kubectl get deployment

    -コマンドラインでDeploymentのPod数を増加
      $ kubectl scale deployment/nginx --replicas=4

    -Pod数増加後のDeploymentの状態を確認
      $ kubectl get deployment

    -Podの状態を確認
      $ kubectl get pods

##Stage3 Serviceの定義
  #Step1:Service(NodePort)を作成して、クラスター外からPodへのアクセスポイントを提供する
    -マニフェストを生成
      $ kubectl expose deployment nginx --name=nginx-service --port=80 --target-port=80 --type=NodePort --dry-run -o yaml

    -マニフェストをファイルに出力
      $ kubectl expose deployment nginx --name nginx-service --port=80 --target-port=80 --type=NodePort --dry-run -o yaml > nginx-service.yaml
      $ ls

    -マニフェストファイルからServiceを作成
      $ kubectl apply -f nginx-service.yaml

    -Serviceが作成されたことを確認
      $ kubectl get services
        ↑NodePortのポート番号を確認
      
    -クラスター内のノードのIPアドレスを確認
      外部IPを確認
    
    -クライアントブラウザから<外部IPアドレス>:<NodePort>へアクセス
     または
    -Google Cloud Shellから<外部IPアドレス>:<NodePort>へアクセス

